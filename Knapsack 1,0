import java.lang.*;

public class Knapsack{
    static final int val= 50;//max value the sack can hold

    int max_val(int i, int j, int wt[], int mat[][], int prft[]) {

        if (i - 1 > -1 && j - wt[i] > -1)
            return (Math.max(mat[i - 1][j], (mat[i - 1][(j - wt[i])] + prft[i])));
        else
            if(i-1<0)
                return (0);
            else
                return(mat[i-1][j]);
    }

    void knapsack(int wt[], int prft[]){
        int i=0;
        int mat[][]= new int[wt.length][val+1];
        for(i=0;i<val+1;i++){
            mat[0][i]=0;
        }
        for(i=0;i<wt.length;i++){
            mat[i][0]=0;
        }
        for(i=0;i<wt.length;i++){
            for(int j=0;j< val+1;j++){
                   mat[i][j]=max_val(i,j,wt,mat,prft);
                System.out.print(mat[i][j] + " ");

            }
            System.out.println("\n");
            }
        System.out.println("Max Value that can be filled is : " + mat[wt.length-1][val]);
        }


    public static void main (String[] s){
        int wt[]= new int[]{0,10, 20, 30 } ;//weight
        int prft[]= new int[]{0,60, 100, 120}; //profit
        Knapsack t = new Knapsack();
        t.knapsack(wt,prft);
    }
}
